limitCoV = 0.66; % specify limit CoV for groups
Spath = fileparts(which('AIRMOD_Bayesian_part1a_LHS.m'));
OpenCossan.setWorkingPath(fullfile(Spath,'workfolder'));

Nmodes = 30; % nr. of extracted modes
CeigfNames = cell(1,Nmodes);
for i = 1:Nmodes
    CeigfNames{i} = ['freq' num2str(i)];
end

% load LHS results
load(fullfile(Spath,'fullmodel.mat'))
Xout_LHS = SimulationData.load('SfileName',fullfile(SbatchFolder,['SimulationData_batch_1_of_10.mat']));
for i=1:10
    Xout_LHS = Xout_LHS.merge(SimulationData.load('SfileName',fullfile(SbatchFolder,['SimulationData_batch_' num2str(i) '_of_10.mat'])));
end
Xout_LHS = Xout_LHS.removeData('Sname','eigenfrequencies'); % remove Dataseries for speed

% load(fullfile(Spath,'Xout_FE_metamodel_validationGM_withCovariance.mat'));
% aaa = Xout_FE_metamodel_validationGM_noNeg6.getValues;
load(fullfile(Spath,'FE_GMmerged.mat'));
aaa = FE_GMmerged.getValues;
eigfreqs = aaa(:,19:end);
pcolor(abs(corrcoef(eigfreqs)));
colorbar;

outClusters = cell(size(eigfreqs,2),1);
logicCorr=(abs(corrcoef(aaa(:,19:end)))>limitCoV);

for i = 1:size(eigfreqs,2)
    outClusters{i} = find(logicCorr(:,i));
end

% % convert to strings
% mcs = cellfun(@(x)(mat2str(x)),outClusters,'uniformoutput',false);
% % run unique
% [~,idxOfUnique,idxYouWant] = unique(mcs);
% 
% outClusters = outClusters(idxOfUnique);
remove = false(size(outClusters));
for i=1:size(eigfreqs,2)
    % check that there are no cluster with shared outputs since they must
    % go in the same group
    if ~remove(i)
        for j=i+1:length(outClusters)
            C = intersect(outClusters{i},outClusters{j});
            if ~isempty(C)
                % if there are common elements, join the groups
                outClusters{i} = unique([outClusters{i};outClusters{j}]);
                remove(C) = true;
            end
        end
        remove(i) = false; % the command remove(C)=true remove also the i-th entry
    end
end
outClusters(remove) = [];
remove = false(size(outClusters));
for i=1:length(outClusters)
    % remove identycal duplicate clusters
    for j=i+1:length(outClusters)
        C = intersect(outClusters{i},outClusters{j});
        if length(C) == length(outClusters{i})
            remove(j) = true;
        end
    end
end
outClusters(remove) = [];
for i=1:length(outClusters)
   display(outClusters{i}');
end
% check the cluster of dependent outputs has been correcctly identified
assert(sum(cellfun(@length,outClusters))==size(eigfreqs,2))
Ngroups = length(outClusters);
%%
Xinput = Xmodel.Xinput;
Xinput = Xinput.sample('Nsamples',1);
Minput = FE_GMmerged.getValues('CSnames',Xmodel.Cinputnames);
Toutput = FE_GMmerged.Tvalues;
Nsamples = FE_GMmerged.Nsamples;
NcalibrationSamples = floor(FE_GMmerged.Nsamples*0.8);

% assign input and output data
Xinput.Xsamples=Samples('Xinput',Xinput);
XcalibrationInput = Xinput; XvalidationInput = Xinput;

XcalibrationInput.Xsamples.MsamplesPhysicalSpace = Minput(1:NcalibrationSamples,:);
XvalidationInput.Xsamples.MsamplesPhysicalSpace = Minput(NcalibrationSamples:end,:);

XcalibrationOutput = FE_GMmerged; 
XvalidationOutput = FE_GMmerged;

XcalibrationOutput.Tvalues = Toutput(1:NcalibrationSamples);
XvalidationOutput.Tvalues = Toutput(NcalibrationSamples:end);

Xnn(Ngroups) = NeuralNetwork;
Xnn_no_data(Ngroups) = NeuralNetwork;
if isempty(gcp)
    parpool(12)
end

parfor igroup = 1:Ngroups
%     if ismember(15,outClusters{igroup})
%      Vnodes=[14 9];
%     else
     Vnodes=[18 2*length(outClusters{igroup})];
%     end
    Xnn(igroup) = NeuralNetwork('Stype','HyperbolicTangent',...
        'VhiddenNodes',Vnodes,...
        'XFullModel',Xmodel,...
        'Cinputnames',Xmodel.Cinputnames,...
        'Coutputnames',CeigfNames(outClusters{igroup}),...
        'XcalibrationInput',XcalibrationInput,...
        'XcalibrationOutput',XcalibrationOutput,...
        'XvalidationInput',XvalidationInput,...
        'XvalidationOutput',XvalidationOutput);
    Xnn(igroup) = Xnn(igroup).calibrate();
    Xnn(igroup) = Xnn(igroup).validate();
    Xnn_no_data(igroup) = Xnn(igroup);
    Xnn_no_data(igroup).XcalibrationInput=[];Xnn_no_data(igroup).XcalibrationOutput=[];
    Xnn_no_data(igroup).XvalidationInput=[];Xnn_no_data(igroup).XvalidationOutput=[];
end
for i=1:Ngroups
    Xnn(i).plotregression;
end