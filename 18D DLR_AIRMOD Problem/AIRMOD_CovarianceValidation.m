%% Model For Covariance

%% Generate new samples to cover the new priors
% new range is 50%-150% posterior
Tposterior=Xout_NN_metamodel_validation.getStatistics;
lowerBoundScale=0.5;
upperBoundScale=1.5;

% support stiffness
theta01 = RandomVariable('Sdistribution','uniform','lowerBound',TinputDefault.theta01('Minimum')*lowerBoundScale, ...
    'upperBound',TinputDefault.theta01('Maximum')*upperBoundScale);
theta02 = RandomVariable('Sdistribution','uniform','lowerBound',TinputDefault.theta02('Minimum')*lowerBoundScale, ...
    'upperBound',TinputDefault.theta02('Maximum')*upperBoundScale);
theta03 = RandomVariable('Sdistribution','uniform','lowerBound',TinputDefault.theta03('Minimum')*lowerBoundScale, ...
    'upperBound',TinputDefault.theta03('Maximum')*upperBoundScale);
theta04 = RandomVariable('Sdistribution','uniform','lowerBound',TinputDefault.theta04('Minimum')*lowerBoundScale, ...
    'upperBound',TinputDefault.theta04('Maximum')*upperBoundScale);
theta05 = RandomVariable('Sdistribution','uniform','lowerBound',TinputDefault.theta05('Minimum')*lowerBoundScale, ...
    'upperBound',TinputDefault.theta05('Maximum')*upperBoundScale);

% joint stiffness
theta06 = RandomVariable('Sdistribution','uniform','lowerBound',TinputDefault.theta06('Minimum')*lowerBoundScale, ...
    'upperBound',TinputDefault.theta06('Maximum')*upperBoundScale);
theta07 = RandomVariable('Sdistribution','uniform','lowerBound',TinputDefault.theta07('Minimum')*lowerBoundScale, ...
    'upperBound',TinputDefault.theta07('Maximum')*upperBoundScale);
theta14 = RandomVariable('Sdistribution','uniform','lowerBound',TinputDefault.theta14('Minimum')*lowerBoundScale, ...
    'upperBound',TinputDefault.theta14('Maximum')*upperBoundScale);
theta15 = RandomVariable('Sdistribution','uniform','lowerBound',TinputDefault.theta15('Minimum')*lowerBoundScale, ...
    'upperBound',TinputDefault.theta15('Maximum')*upperBoundScale);
theta16 = RandomVariable('Sdistribution','uniform','lowerBound',TinputDefault.theta16('Minimum')*lowerBoundScale, ...
    'upperBound',TinputDefault.theta16('Maximum')*upperBoundScale);
theta17 = RandomVariable('Sdistribution','uniform','lowerBound',TinputDefault.theta17('Minimum')*lowerBoundScale, ...
    'upperBound',TinputDefault.theta17('Maximum')*upperBoundScale);
theta18 = RandomVariable('Sdistribution','uniform','lowerBound',TinputDefault.theta18('Minimum')*lowerBoundScale, ...
    'upperBound',TinputDefault.theta18('Maximum')*upperBoundScale);

% masses (sensor cables, screws and glue)
theta08 = RandomVariable('Sdistribution','uniform','lowerBound',TinputDefault.theta08('Minimum')*lowerBoundScale, ...
    'upperBound',TinputDefault.theta08('Maximum')*upperBoundScale);
theta09 = RandomVariable('Sdistribution','uniform','lowerBound',TinputDefault.theta09('Minimum')*lowerBoundScale, ...
    'upperBound',TinputDefault.theta09('Maximum')*upperBoundScale);
theta10 = RandomVariable('Sdistribution','uniform','lowerBound',TinputDefault.theta10('Minimum')*lowerBoundScale, ...
    'upperBound',TinputDefault.theta10('Maximum')*upperBoundScale);
theta11 = RandomVariable('Sdistribution','uniform','lowerBound',TinputDefault.theta11('Minimum')*lowerBoundScale, ...
    'upperBound',TinputDefault.theta11('Maximum')*upperBoundScale);
theta12 = RandomVariable('Sdistribution','uniform','lowerBound',TinputDefault.theta12('Minimum')*lowerBoundScale, ...
    'upperBound',TinputDefault.theta12('Maximum')*upperBoundScale);
theta13 = RandomVariable('Sdistribution','uniform','lowerBound',Tposterior.theta13('Minimum')*lowerBoundScale, ...
    'upperBound',TinputDefault.theta13('Maximum')*upperBoundScale);

Xrvset = RandomVariableSet('Cmembers',{'theta01','theta02','theta03','theta04',...
    'theta05','theta06','theta07','theta08','theta09','theta10','theta11',...
    'theta12','theta13','theta14','theta15','theta16','theta17','theta18'});

Xinput = Input('CXmembers',{Xrvset},'CSmembers',{'Xrvset'});

%% Test model
Xmodel = Model('Xinput',Xinput,'Xevaluator',Xeval);